using CommunityToolkit.Mvvm.ComponentModel;
using GetStoreApp.Models;
using HtmlAgilityPack;
using System;
using System.Collections.Generic;
using System.Linq;

namespace GetStoreApp.Services.Home
{
    /// <summary>
    /// 解析HtmlRequestService返回的Categoryid和列表数据
    /// Parse the Categoryid and list data returned by htmlRequestService
    /// </summary>
    public class HtmlParseService
    {
        private HtmlDocument HtmlDocument { get; set; }

        /// <summary>
        /// 初始化HtmlParseService类时添加HtmlReqeustService生成的字符串数据
        /// The HtmlParseService class is initialized with string data generated by the HtmlReqeustService
        /// </summary>
        /// <param name="HttpRequestData">HtmlReqeustService生成的数据</param>
        public HtmlParseService(HttpRequestData HttpRequestData)
        {
            HtmlDocument = new HtmlDocument();

            // 添加网页请求返回的具体内容
            HtmlDocument.LoadHtml(HttpRequestData.RequestContent);
        }

        /// <summary>
        /// 解析网页数据中包含的CategoryID信息
        /// Parse the CategoryID information contained in the web page data
        /// </summary>
        /// <returns>返回得到的CategoryID字符串数据</returns>
        public string HtmlParseCID()
        {
            return HtmlDocument.DocumentNode.SelectSingleNode("//i").InnerText;
        }

        /// <summary>
        /// 解析网页数据中包含的所有信息
        /// Parse all the information contained in the web page data
        /// </summary>
        /// <returns>返回得到的所有所有标签数据</returns>
        public List<ResultData> HtmlParseLinks()
        {
            List<ResultData> ResultDataList = new();

            // 获取<table class="tftable" border="1" align="center">标签信息
            HtmlNode RequestLinkNode = HtmlDocument.DocumentNode.SelectSingleNode("//table[@class='tftable' and @border='1' and @align='center']");

            // 获取<table class="tftable" border="1" align="center">下所有的tr标签
            IEnumerable<HtmlNode> RequestLinkNodeList = RequestLinkNode
                 .Descendants("tr")
                 .Where(x => x.Attributes.Contains("style"));

            foreach (var item in RequestLinkNodeList)
            {
                // 访问每一个tr标签的所有td标签，td标签包括应用包名称，链接名称，链接过期时间，应用包文件SHA-1值，应用包文件大小
                HtmlNodeCollection TdNodeList = item.ChildNodes;

                // 将获取到的数据添加到ResultDataList集合中
                ResultDataList.Add(new ResultData()
                {
                    FileName = TdNodeList[0].InnerText,
                    FileLink = TdNodeList[0].SelectSingleNode("a").Attributes["href"].Value,
                    FileLinkExpireTime = TdNodeList[1].InnerText,
                    FileSHA1 = TdNodeList[2].InnerText,
                    FileSize = TdNodeList[3].InnerText
                }); ;
            }

            return ResultDataList;
        }
    }
}
