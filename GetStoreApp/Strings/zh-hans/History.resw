<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Cancel" xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="CancelDescription" xml:space="preserve">
    <value>退出多选模式</value>
  </data>
  <data name="Channel" xml:space="preserve">
    <value>通道</value>
  </data>
  <data name="Copy" xml:space="preserve">
    <value>复制</value>
  </data>
  <data name="CopyAll" xml:space="preserve">
    <value>复制全部</value>
  </data>
  <data name="CopyDescription" xml:space="preserve">
    <value>复制选中的内容到剪贴板</value>
  </data>
  <data name="CopyLink" xml:space="preserve">
    <value>复制链接</value>
  </data>
  <data name="CopySelected" xml:space="preserve">
    <value>复制选中的项目</value>
  </data>
  <data name="CopySelectedDescription" xml:space="preserve">
    <value>复制选中行的内容到剪贴板</value>
  </data>
  <data name="DateTime" xml:space="preserve">
    <value>时间</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>删除</value>
  </data>
  <data name="DeleteDescription" xml:space="preserve">
    <value>删除选中行的记录</value>
  </data>
  <data name="DoubleTapToInput" xml:space="preserve">
    <value>双击该行填入信息</value>
  </data>
  <data name="Fillin" xml:space="preserve">
    <value>填入</value>
  </data>
  <data name="FillinDescription" xml:space="preserve">
    <value>点击"填入"按钮后会在上面的文本输入框中填入链接，点击“获取链接”即可获取具体内容</value>
  </data>
  <data name="Filter" xml:space="preserve">
    <value>筛选</value>
  </data>
  <data name="FilterDescription" xml:space="preserve">
    <value>筛选出符合指定条件的数据</value>
  </data>
  <data name="HistoryCountInfo" xml:space="preserve">
    <value>共有{0}条历史记录</value>
  </data>
  <data name="HistoryEmpty" xml:space="preserve">
    <value>没有任何历史记录</value>
  </data>
  <data name="HistoryEmptyDescription" xml:space="preserve">
    <value>快去获取想要下载的应用吧，您输入过的链接将会显示在此处</value>
  </data>
  <data name="HistoryFilterEmptyDescription" xml:space="preserve">
    <value>没有符合该条件下的历史记录，请修改筛选条件后重试</value>
  </data>
  <data name="Link" xml:space="preserve">
    <value>链接</value>
  </data>
  <data name="None" xml:space="preserve">
    <value>无</value>
  </data>
  <data name="Operation" xml:space="preserve">
    <value>操作</value>
  </data>
  <data name="Refresh" xml:space="preserve">
    <value>刷新</value>
  </data>
  <data name="Select" xml:space="preserve">
    <value>选择</value>
  </data>
  <data name="SelectAll" xml:space="preserve">
    <value>全选</value>
  </data>
  <data name="SelectDescription" xml:space="preserve">
    <value>进入多选模式</value>
  </data>
  <data name="SelectedDescription" xml:space="preserve">
    <value>已选择</value>
  </data>
  <data name="SelectedHistoryCountInfo" xml:space="preserve">
    <value>已选中{0}项</value>
  </data>
  <data name="SelectNone" xml:space="preserve">
    <value>全部不选</value>
  </data>
  <data name="Sort" xml:space="preserve">
    <value>排序</value>
  </data>
  <data name="SortDescription" xml:space="preserve">
    <value>按照记录创建的时间进行排序</value>
  </data>
  <data name="TimeDecreaseSort" xml:space="preserve">
    <value>时间递减排序</value>
  </data>
  <data name="TimeDecreaseSortDescription" xml:space="preserve">
    <value>按照记录创建的时间递减进行排序</value>
  </data>
  <data name="TimeIncreaseSort" xml:space="preserve">
    <value>时间递增排序</value>
  </data>
  <data name="TimeIncreaseSortDescription" xml:space="preserve">
    <value>按照记录创建的时间递增进行排序</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>历史记录</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>类型</value>
  </data>
  <data name="UnselectedDescription" xml:space="preserve">
    <value>未选择</value>
  </data>
</root>