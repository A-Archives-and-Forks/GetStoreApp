<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppVersion" xml:space="preserve">
    <value>Application Version: {0}</value>
  </data>
  <data name="BeginnerGuide" xml:space="preserve">
    <value>Beginner's guide</value>
  </data>
  <data name="BeginnerGuideDescription" xml:space="preserve">
    <value>Once the app opens, select the type of link and channel you want to get. When the selection is complete, enter the link content you want to get, and when the input is complete, click the 'Get Link' button to get the app installation package corresponding to the store link. After successful acquisition, your input record will be stored, and the next time you open the app, you can quickly get the app installation package corresponding to the store link.</value>
  </data>
  <data name="BriefIntroduction" xml:space="preserve">
    <value>App brief introduction</value>
  </data>
  <data name="CheckNetwork" xml:space="preserve">
    <value>Check the network</value>
  </data>
  <data name="CheckStep1" xml:space="preserve">
    <value>1. If the error is caused by the network connection timeout, you can try to get it again.</value>
  </data>
  <data name="CheckStep2" xml:space="preserve">
    <value>2. Only the correct link will get the app installation package, please check if the link you entered is correct.</value>
  </data>
  <data name="CheckStep3" xml:space="preserve">
    <value>3. The app needs networking to send a get request. Check your device's network condition and wait until your device's network connection is working properly to try to regain it.</value>
  </data>
  <data name="CheckUpdate" xml:space="preserve">
    <value>Check Update</value>
  </data>
  <data name="DesktopApps" xml:space="preserve">
    <value>Traditional desktop apps</value>
  </data>
  <data name="DesktopAppsDescription" xml:space="preserve">
    <value>Microsoft has allowed the release of traditional desktop apps in the latest Microsoft Store. The installation packages for these applications are typically in .EXE or .MSI format, rather than the . MSIX or . APPX format. This type of application cannot be crawled automatically through the app.</value>
  </data>
  <data name="Developer" xml:space="preserve">
    <value>Developer:</value>
  </data>
  <data name="DeveloperHomePage" xml:space="preserve">
    <value>https://github.com/Gaoyifei1011</value>
  </data>
  <data name="DeveloperName" xml:space="preserve">
    <value>@高怡飞</value>
  </data>
  <data name="DevelopPurpose" xml:space="preserve">
    <value>Purpose of development</value>
  </data>
  <data name="DevelopPurposeDescription" xml:space="preserve">
    <value>The Microsoft Store provides a distribution, download, and update channel for apps that are already on the shelves. But in the latest Microsoft Store, Microsoft requires users to use an online account to download apps from the store. This has plagued some users who never use a Microsoft account and whose apps must rely on store downloads. The app uses the acquisition interface provided by store.rg-adguard.net, bypassing the official App Download Channel provided by the Microsoft Store. Users can download the required app installation packages offline for standalone deployment.</value>
  </data>
  <data name="ErrorSolution" xml:space="preserve">
    <value>Request failed solution</value>
  </data>
  <data name="ErrorSolutionDescription" xml:space="preserve">
    <value>If the background of the message bar turns red, it means that an error has occurred in your request. You can get information through the "View" button in the information status bar. After you understand the specific cause of the error, you can do the following.</value>
  </data>
  <data name="HeaderDescription" xml:space="preserve">
    <value>Welcome to download the GetStoreApp.Wish you a pleasant experience</value>
  </data>
  <data name="Maintenance" xml:space="preserve">
    <value>Subsequent updates / maintenance</value>
  </data>
  <data name="MaintenanceDescription" xml:space="preserve">
    <value>At present, the basic functions of the application have been implemented, and the download and offline installation of the application are also included in the future development plan. Subsequent updates are scheduled for an indefinite period of time.</value>
  </data>
  <data name="PaidApps" xml:space="preserve">
    <value>Please download the paid app from the official channel</value>
  </data>
  <data name="PaidAppsDescription" xml:space="preserve">
    <value>Microsoft has restricted the operation of paid apps in Windows systems, and paid apps that have not been purchased cannot function properly after installation through offline installation packages. If you have a paid app that you've already purchased, download it from the Microsoft Store.</value>
  </data>
  <data name="Precaution" xml:space="preserve">
    <value>Precautions</value>
  </data>
  <data name="PrivacyandSecurity" xml:space="preserve">
    <value>Privacy and Security</value>
  </data>
  <data name="PrivacyandSecurityDescription" xml:space="preserve">
    <value>All of the app's code is open source on Github, and all code can be read on its own. The history involved in the app is stored in the app's cache folder and is not uploaded over the network. All content is also deleted when the app is uninstalled or reset. When downloading an app, make sure that you get the app from a reliable source, and the only address you currently specify is the Release page of the Github repository.</value>
  </data>
  <data name="ProjectHomePage" xml:space="preserve">
    <value>Project home page</value>
  </data>
  <data name="RecognizeDesktopApps" xml:space="preserve">
    <value>How to recognize traditional desktop apps?</value>
  </data>
  <data name="Reference" xml:space="preserve">
    <value>Project references (Alphabetically sorted)</value>
  </data>
  <data name="SendFeedback" xml:space="preserve">
    <value>Send feedback</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="TroubleShoot" xml:space="preserve">
    <value>Trouble shoot</value>
  </data>
  <data name="UpdatePath" xml:space="preserve">
    <value>Update path</value>
  </data>
  <data name="UpdatePathDescription" xml:space="preserve">
    <value>Apps listed on the Microsoft Store can only be downloaded or updated through the Microsoft Store and are not allowed to be downloaded and installed through other third-party channels. This practice ensures the reliability of the application source path. As a result, the app somehow violates the policies of the Microsoft Store and cannot be listed in the Microsoft Store. You can open the release page of the project by "Check for Updates", find the latest version of the app yourself, and download the installation package in MSIX format for the project to update.</value>
  </data>
  <data name="UseInstruction" xml:space="preserve">
    <value>Direction for use</value>
  </data>
</root>