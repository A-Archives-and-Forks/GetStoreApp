<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppVersion" xml:space="preserve">
    <value>应用版本：{0}</value>
  </data>
  <data name="BeginnerGuide" xml:space="preserve">
    <value>新手指南</value>
  </data>
  <data name="BeginnerGuideDescription" xml:space="preserve">
    <value>应用打开后，选择您要获取的链接类型和通道类型。选择完成后，输入您要获取的链接内容，输入完成后，点击‘获取链接’按钮即可获取到商店链接对应的应用安装包。在成功获取后，您的输入记录将被储存，下一次打开应用后就可以快速获取到商店链接对应的应用安装包。</value>
  </data>
  <data name="BriefIntroduction" xml:space="preserve">
    <value>应用简介</value>
  </data>
  <data name="CheckNetwork" xml:space="preserve">
    <value>检查网络</value>
  </data>
  <data name="CheckStep1" xml:space="preserve">
    <value>1.如果是因为网路连接超时引起的错误，您可以尝试重新获取。</value>
  </data>
  <data name="CheckStep2" xml:space="preserve">
    <value>2.只有正确的链接才能获取应用安装包，请检查您输入的链接是否正确。</value>
  </data>
  <data name="CheckStep3" xml:space="preserve">
    <value>3.应用需要联网功能才能发送获取请求。请检查您设备的网络情况，待到您设备的网络连接正常后尝试重新获取。</value>
  </data>
  <data name="CheckUpdate" xml:space="preserve">
    <value>检查更新</value>
  </data>
  <data name="DesktopApps" xml:space="preserve">
    <value>传统桌面应用不能获取</value>
  </data>
  <data name="DesktopAppsDescription" xml:space="preserve">
    <value>微软已经允许在最新的 Microsoft Store 中发布传统桌面应用。这些应用程序的安装包通常为 .EXE 或 .MSI 格式，而非商店中的 .MSIX 或 .APPX 格式。这一类型的应用程序是不能通过该应用自动抓取的。</value>
  </data>
  <data name="Developer" xml:space="preserve">
    <value>开发者：</value>
  </data>
  <data name="DeveloperHomePage" xml:space="preserve">
    <value>https://github.com/Gaoyifei1011</value>
  </data>
  <data name="DeveloperName" xml:space="preserve">
    <value>@高怡飞</value>
  </data>
  <data name="DevelopPurpose" xml:space="preserve">
    <value>开发目的</value>
  </data>
  <data name="DevelopPurposeDescription" xml:space="preserve">
    <value>Microsoft Store 提供了对已上架商店应用的分发，下载和更新通道。但是在最新的 Microsoft Store 中，微软要求用户下载商店的应用需要使用在线账户。这对一些从不使用微软账户且应用必须依赖商店下载的用户带来了困扰。该应用使用了 store.rg-adguard.net 提供的获取接口，绕开了 Microsoft Store 官方提供的应用下载渠道。用户可以离线下载所需的应用安装包，进行独立部署。</value>
  </data>
  <data name="ErrorSolution" xml:space="preserve">
    <value>获取失败解决方案</value>
  </data>
  <data name="ErrorSolutionDescription" xml:space="preserve">
    <value>如果信息提示栏的背景变成红色，那么就说明您的本次请求发生了错误。您可以通过信息状态栏的“查看”按钮获取相关信息。在了解了具体的错误原因后，您可以进行以下操作。</value>
  </data>
  <data name="HeaderDescription" xml:space="preserve">
    <value>欢迎大家下载获取商店应用，祝您使用愉快</value>
  </data>
  <data name="Maintenance" xml:space="preserve">
    <value>后续的更新 / 维护</value>
  </data>
  <data name="MaintenanceDescription" xml:space="preserve">
    <value>目前应用的基本功能已经实现，在未来的开发计划中也包含了对应用的下载和离线安装。后续更新的计划不定，有时间更新。</value>
  </data>
  <data name="PaidApps" xml:space="preserve">
    <value>付费应用请从官方渠道下载</value>
  </data>
  <data name="PaidAppsDescription" xml:space="preserve">
    <value>微软在 Windows 系统中对付费应用的运行进行了限制，没有购买的付费应用是不能通过离线安装包安装后正常运行的。如果您有已经购买的付费应用，请从 Microsoft Store 中下载。</value>
  </data>
  <data name="Precaution" xml:space="preserve">
    <value>注意事项</value>
  </data>
  <data name="PrivacyandSecurity" xml:space="preserve">
    <value>隐私安全</value>
  </data>
  <data name="PrivacyandSecurityDescription" xml:space="preserve">
    <value>应用的所有代码在 Github 上开源，所有代码都可以自行阅读。应用中涉及到的历史记录都存储在应用的缓存文件夹中，不会通过网络上传。应用在卸载或重置时所有的内容也会一并删除。在下载应用时请确保您获取应用的来源可靠，目前指定的唯一地址就是 Github 仓库的 Release 页面。</value>
  </data>
  <data name="ProjectHomePage" xml:space="preserve">
    <value>项目主页</value>
  </data>
  <data name="RecognizeDesktopApps" xml:space="preserve">
    <value>如何识别传统桌面应用?</value>
  </data>
  <data name="Reference" xml:space="preserve">
    <value>项目引用（按英文字母排序）</value>
  </data>
  <data name="SendFeedback" xml:space="preserve">
    <value>发送反馈</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>关于</value>
  </data>
  <data name="TroubleShoot" xml:space="preserve">
    <value>疑难解答</value>
  </data>
  <data name="UpdatePath" xml:space="preserve">
    <value>更新途径</value>
  </data>
  <data name="UpdatePathDescription" xml:space="preserve">
    <value>Microsoft Store 上架的应用只能通过 Microsoft Store 进行下载或更新，不允许通过其他第三方渠道进行下载安装。这种做法保证了应用来源途径的可靠性。因此，该应用在某种程度上违背了 Microsoft Store 的政策，无法在 Microsoft Store 中上架。您可以通过“检查更新”打开项目的发布页面，自行查找应用的最新版本，下载该项目 MSIX 格式的安装包进行更新。</value>
  </data>
  <data name="UseInstruction" xml:space="preserve">
    <value>使用说明</value>
  </data>
</root>